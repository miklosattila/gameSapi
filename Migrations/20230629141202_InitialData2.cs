using Microsoft.EntityFrameworkCore.Migrations;
#nullable disable

namespace Catolog.Migrations
{
    /// <inheritdoc />
    public partial class InitialData2 : Migration
    {
        public int[,]map1 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,5,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,22,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,1,5,5,5,5,5,5,12,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,5,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,5,5,5,5,5,5,5,5,5,22,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };
        public int[,]map2 = new int [40,40] {
        {0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,3,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,1,1,3,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,1,5,5,5,5,5,5,22,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,5,1,3,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,5,5,0,0,0,5,1,5,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,5,1,3,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,5,1,5,5,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,5,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,5,1,5,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };



public int[,]map3 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,22,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,0,0,0,0,0} ,
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,12,5,5,5,5,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,22,5,5,5,5,5,5,5,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,5,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,5,5,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0} 
    };
    


    

    public int[,]map4 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,0} ,
        {0,0,0,0,5,5,5,5,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0} ,
        {0,0,0,0,5,1,3,1,1,1,1,1,1,1,5,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,5,1,5,5,5,5,5,5,0} ,
        {0,0,0,0,5,1,5,5,5,22,5,5,5,1,5,0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,5,5,5,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,5,5,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,5,1,1,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,1,5,0,0,0,0,5,1,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,5,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,0,0,5,1,5,5,5,5,12,5,5,5,5,5,5,5,5,5,5,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,12,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,22,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,1,1,1,1,1,1,3,1,1,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,0,5,1,5,5,5,12,5,5,5,5,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,5,4,5,0,0,0,0,0,0,0,5,4,5,0,0,0} 
    };
    
    

    public int[,]map5 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,1,22,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,5,1,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,5,3,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,3,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,12,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0} ,
        {0,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0} ,
        {0,5,4,1,1,1,1,1,1,1,1,5,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5,5,0} ,
        {0,5,5,5,5,5,5,5,5,5,1,5,0,0,5,1,1,1,1,1,1,1,1,1,1,3,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,1,5,5,5,5,5,5,12,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,12,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };


    public int[,]map6 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,0,5,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,5,1,1,1,1,1,1,4,5,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,5,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,22,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1} ,
        {0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };

        public int[,]map7 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,42,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,3,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,0,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,1,1,3,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,5,42,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,22,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}  };


    public int[,]map8 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,22,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,42,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,1,1,1,1,1,1,3,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}  };


    public int[,]map9 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0} ,
        {0,0,0,5,1,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,8,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,5,1,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,5,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,5} ,
        {0,0,0,0,0,5,1,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,5,1,5,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,5,1,5,0,0,0,0,0,8,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,5,1,5,8,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,5,1,5,8,0,0,0,0,8,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,5,5,8,0,5,1,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,5,5,5,5,5,5,5,22,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,5,1,1,1,1,1,3,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,3,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,4,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}  };
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            List<object> mapEntity= new List<object>();
               for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map9[i,j]>0)
                    {
                        var data=( 9,map9[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map9[i,j])
                        {   
                            case 1:
                                data =( 9,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 9,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 9,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 9,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 9,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 9,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 9,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 9,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 9,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 9,map9[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }
               for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map8[i,j]>0)
                    {
                        var data=( 8,map8[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map8[i,j])
                        {   
                            case 1:
                                data =( 8,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 8,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 8,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 8,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 8,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 8,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 8,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 8,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 8,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 8,map8[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }
                for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map7[i,j]>0)
                    {
                        var data=( 7,map7[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map7[i,j])
                        {   
                            case 1:
                                data =( 7,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 7,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 7,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 7,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 7,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 7,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 7,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 7,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 7,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 7,map7[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;;
                        }
                        mapEntity.Add(data);
                    }
                    
                } 
                for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map6[i,j]>0)
                    {
                        var data=( 6,map6[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map6[i,j])
                        {   
                            case 1:
                                data =( 6,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 6,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 6,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 6,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 6,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 6,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 6,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 6,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 6,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 6,map6[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }
                for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map5[i,j]>0)
                    {
                        var data=( 5,map5[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map5[i,j])
                        {   
                            case 1:
                                data =( 5,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 5,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 5,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 5,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 5,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 5,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 5,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 5,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 5,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 5,map5[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }
                for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map4[i,j]>0)
                    {
                        var data=( 4,map4[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map4[i,j])
                        {   
                            case 1:
                                data =( 4,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 4,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 4,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 4,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 4,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 4,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 4,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 4,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 4,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 4,map4[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }
                for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map3[i,j]>0)
                    {
                        var data=( 3,map3[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map3[i,j])
                        {   
                            case 1:
                                data =( 3,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 3,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 3,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 3,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 3,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 3,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 3,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 3,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 3,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 3,map3[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }
                for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    if(map2[i,j]>0)
                    {
                        var data=( 2,map2[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map2[i,j])
                        {   
                            case 1:
                                data =( 2,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 2,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 2,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 2,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 2,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 2,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 2,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 2,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 2,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 2,map2[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }
                for (int i = 0; i < 40; i++)
                for (int j = 0; j < 40; j++)
                {
                    // { 12,12,"NPC (2 lehetoseg, jobbra van a megoldas)", DateTimeOffset.UtcNow, "Mackotestver" },
                    // {22, 22,"NPC (2 lehetoseg, balra van a megoldas)", DateTimeOffset.UtcNow, "Mackotestver" },
                    // { 32,32,"NPC (3 lehetoseg, jobbra van a megoldas)", DateTimeOffset.UtcNow, "Mackotestver" },
                    // {42, 42,"NPC (3 lehetoseg, kozepen van a megoldas)", DateTimeOffset.UtcNow, "Mackotestver" },
                    // {52, 52,"NPC (3 lehetoseg, balra van a megoldas)", DateTimeOffset.UtcNow, "Mackotestver" },
                    if(map1[i,j]>0)
                    {
                        var data=( 1,map1[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                        switch (map1[i,j])
                        {   
                            case 1:
                                data =( 1,1, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 3:
                                data =( 1,2, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 4:
                                data =( 1,3, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 5:
                                data =( 1,4, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 12:
                                data =( 1,5, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 22:
                                data =( 1,6, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 32:
                                data =( 1,7, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 42:
                                data =( 1,8, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            case 52:
                                data =( 1,9, i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                            default:
                                data =( 1,map1[i,j], i, j, DateTimeOffset.UtcNow, "Mackotestver" );
                                break;
                        }
                        mapEntity.Add(data);
                    }
                    
                }

                int rowCount = mapEntity.Count;
                int colCount = 6; 

                object[,] values = new object[rowCount, colCount];
                for (int i = 0; i < rowCount; i++)
                {
                    var data = mapEntity[i];
                    values[i, 0] = ((ValueTuple<int, int, int, int, DateTimeOffset, string>)data).Item1;
                    values[i, 1] = ((ValueTuple<int, int, int, int, DateTimeOffset, string>)data).Item2;
                    values[i, 2] = ((ValueTuple<int, int, int, int, DateTimeOffset, string>)data).Item3;
                    values[i, 3] = ((ValueTuple<int, int, int, int, DateTimeOffset, string>)data).Item4;
                    values[i, 4] = ((ValueTuple<int, int, int, int, DateTimeOffset, string>)data).Item5;
                    values[i, 5] = ((ValueTuple<int, int, int, int, DateTimeOffset, string>)data).Item6;
                }
                Console.WriteLine(values.ToString());
                migrationBuilder.InsertData(
                 table: "MapEntitys",
                 columns: new[] { "MapId", "MapEntityTypeid", "Xcoordinate", "Ycoordinate", "CreatedDate", "CreatedAT" },
                 values: values);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("DELETE FROM MapEntitys");
        }
    }
}
